{"ast":null,"code":"var _jsxFileName = \"/Users/anilaltuncu/OnlyBilkentSon2/OnlyBilkent/fronted/src/components/layout/dashboardMock.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getLoanPost, getPost, getBaseImage } from '../../api/axiosConfig';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [postData, setPostData] = useState([]);\n  const [imageData, setImageData] = useState([]);\n  const {\n    postId\n  } = useParams();\n  const [posts, setPosts] = useState([]);\n  const [runCount, setRunCount] = useState(0);\n  useEffect(() => {\n    const fetchSellingPosts = async () => {\n      try {\n        const response = await getLoanPost();\n        setPosts(response.data);\n      } catch (error) {\n        console.error('Error fetching selling posts:', error);\n        // Handle error appropriately\n      }\n    };\n    fetchSellingPosts();\n  }, []);\n  useEffect(() => {\n    console.log(posts);\n    const fetchDataForPosts = async () => {\n      for (const post of posts) {\n        try {\n          const postResponse = await getPost(post.id);\n          setPostData(postResponse.data);\n          console.log(postResponse.data);\n          const imageIdTemp = postResponse === null || postResponse === void 0 ? void 0 : postResponse.data.imageId;\n          console.log(imageIdTemp);\n          const imageResponse = await getBaseImage(imageIdTemp);\n          setImageData(imageResponse.data);\n          console.log(imageResponse.data);\n        } catch (error) {\n          console.error('Error fetching post or image data:', error);\n        }\n      }\n    };\n    fetchDataForPosts();\n  }, [posts]);\n\n  // Update runCount whenever postId or posts change\n  useEffect(() => {\n    setRunCount(prevRunCount => prevRunCount + 1);\n  }, [postId, posts]);\n\n  // Fetch post details based on the postId when postId changes\n  useEffect(() => {\n    console.log('Fetching post details. Run count:', runCount);\n    if (postId && posts.length > 0) {\n      getPost(postId).then(response => {\n        setPostData(response.data);\n      }).catch(error => {\n        console.error('There was an error fetching the post data:', error);\n      });\n    }\n  }, [postId, posts, runCount]); // Include runCount in the dependencies\n\n  const imageId = postData === null || postData === void 0 ? void 0 : postData.imageId;\n  console.log(imageId);\n  console.log(imageData);\n  // Render only when both postData and imageData are available\n  if (postData && imageData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Selling Posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"posts-container\",\n        children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: post.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this), imageData && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:image/jpeg;base64,${imageData}`,\n            alt: post.title,\n            style: {\n              maxWidth: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 33\n          }, this)]\n        }, post.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this);\n  } else {\n    // Loading state or alternate content if postData or imageData is not available yet\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 16\n    }, this);\n  }\n};\n_s(Dashboard, \"+EDtPPDXWxdaxewGWc1jqHI+kf0=\", false, function () {\n  return [useParams];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","getLoanPost","getPost","getBaseImage","useParams","jsxDEV","_jsxDEV","Dashboard","_s","postData","setPostData","imageData","setImageData","postId","posts","setPosts","runCount","setRunCount","fetchSellingPosts","response","data","error","console","log","fetchDataForPosts","post","postResponse","id","imageIdTemp","imageId","imageResponse","prevRunCount","length","then","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","title","content","src","alt","style","maxWidth","_c","$RefreshReg$"],"sources":["/Users/anilaltuncu/OnlyBilkentSon2/OnlyBilkent/fronted/src/components/layout/dashboardMock.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getLoanPost, getPost, getBaseImage } from '../../api/axiosConfig';\nimport { useParams } from 'react-router-dom';\n\nconst Dashboard = () => {\n    const [postData, setPostData] = useState([]);\n    const [imageData, setImageData] = useState([]);\n    const { postId } = useParams();\n    const [posts, setPosts] = useState([]);\n    const [runCount, setRunCount] = useState(0);\n\n    useEffect(() => {\n        const fetchSellingPosts = async () => {\n            try {\n                const response = await getLoanPost();\n                setPosts(response.data);\n            } catch (error) {\n                console.error('Error fetching selling posts:', error);\n                // Handle error appropriately\n            }\n        };\n\n        fetchSellingPosts();\n    }, []);\n\n    useEffect(() => {\n        console.log(posts);\n    \n        const fetchDataForPosts = async () => {\n            for (const post of posts) {\n                try {\n                    const postResponse = await getPost(post.id);\n                    setPostData(postResponse.data);\n                    console.log(postResponse.data);\n    \n                    const imageIdTemp = postResponse?.data.imageId;\n                    console.log(imageIdTemp);\n    \n                    const imageResponse = await getBaseImage(imageIdTemp);\n                    setImageData(imageResponse.data);\n                    console.log(imageResponse.data);\n                } catch (error) {\n                    console.error('Error fetching post or image data:', error);\n                }\n            }\n        };\n    \n        fetchDataForPosts();\n    }, [posts]);\n    \n\n    \n    // Update runCount whenever postId or posts change\n    useEffect(() => {\n        setRunCount((prevRunCount) => prevRunCount + 1);\n    }, [postId, posts]);\n\n    // Fetch post details based on the postId when postId changes\n    useEffect(() => {\n        console.log('Fetching post details. Run count:', runCount);\n\n        if (postId && posts.length > 0) {\n            getPost(postId)\n                .then(response => {\n                    setPostData(response.data);\n                })\n                .catch(error => {\n                    console.error('There was an error fetching the post data:', error);\n                });\n        }\n    }, [postId, posts, runCount]); // Include runCount in the dependencies\n\n\n    const imageId = postData?.imageId;\n    console.log(imageId);\n\n\n    console.log(imageData);\n    // Render only when both postData and imageData are available\n    if (postData && imageData) {\n        return (\n            <div>\n                <h1>Selling Posts</h1>\n                <div className=\"posts-container\">\n                    {posts.map(post => (\n                        <div key={post.id} className=\"post\">\n                            <h2>{post.title}</h2>\n                            <p>{post.content}</p>\n                            {imageData && (\n                                <img src={`data:image/jpeg;base64,${imageData}`} alt={post.title} style={{ maxWidth: '100%' }} />\n                            )}\n                            {/* Additional post details here */}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        );\n    } else {\n        // Loading state or alternate content if postData or imageData is not available yet\n        return <p>Loading...</p>;\n    }\n};\n\nexport default Dashboard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}